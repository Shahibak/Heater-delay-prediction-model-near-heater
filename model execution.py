# -*- coding: utf-8 -*-
"""Group parameter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dn7Ok91lUScb6-tFraB-c9Dfs10fEI3g
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow import keras
from tensorflow.keras import layers
from keras.layers import TFSMLayer

new_model = keras.models.load_model('dnn_model_2.keras')

tau = 40 #Voltage pulse decay time constant
jh = 600 #heater current density
tka = 0.075 # Thickness of kapton
tG10 = 0.2 # Thickness of G10
Wcoil = 20 # Width of the coil
fcusc = 1.5 # Fraction of copper to superconductor
fraG = 0.15 # Fraction of G10
Bp = 9 # Magnet field
Tcs = 6
Im = 10000 # Magnet current

min_values = [0.8, 0.1, 0.025, 200.0, 0.1, 10.0, 12.73, 6.0]  # Minimum values for normalization
max_values = [2.2, 0.2, 0.075, 600.0, 0.22, 45.0, 20.0, 15.0]  # Maximum values for normalization
non_normalized_data = [fcusc, tG10, tka, jh, fraG, tau, Wcoil, Tcs]  # Non-normalized input data
normalized_data = []  # List to store normalized data
hd_values = []  # List to store outputs

# Normalize the input data using min-max normalization
for i in range(len(non_normalized_data)):
    j = (non_normalized_data[i] - min_values[i]) / (max_values[i] - min_values[i])
    normalized_data.append(j)

# Step 2: Define Ranges for tau
Tcs_values = np.linspace(6, 15, 10)  # 7 values for tau between 10 and 45

# Step 3: Loop through combinations of tau
for Tcs in Tcs_values:
  non_normalized_data[7] = Tcs
          # Normalize the data again with updated tau
  normalized_data = [(non_normalized_data[i] - min_values[i]) / (max_values[i] - min_values[i]) for i in range(len(non_normalized_data))]

          # Reshape the normalized data for model input
  input_data = np.array(normalized_data).reshape(1, -1)  # Convert to NumPy array and reshape

          # Make predictions using the model (replace 'new_model' with your model's instance)
  output = new_model.predict(input_data)  # Pass the NumPy array 'input_data'

          # Extract the scalar value from the NumPy array
  scalar_output = output.item()  # Convert the array to a scalar

  hd_values.append(scalar_output)

print(f"Number of predictions made: {len(hd_values)}")
print("Predicted Outputs:")
print(hd_values)